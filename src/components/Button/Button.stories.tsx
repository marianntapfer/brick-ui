import { Button } from './Button';
import { Meta, StoryObj } from '@storybook/react';
import { within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';
// used to be ComponentStory and ComponentMeta

const meta: Meta<typeof Button> = {
  // will be generated by file structure is not needed
  // title: 'components/Button',
  component: Button,
  //ðŸ‘‡ Enables auto-generated documentation for the component story
  tags: ['autodocs'],
  args: { label: 'Action phrase', variant: 'default' },
  parameters: {
    // { layout: 'fullscreen' },
    backgrounds: {
      values: [
        { name: 'red', value: '#f00' },
        { name: 'green', value: '#0f0' },
        { name: 'blue', value: '#00f' },
      ],
    },
  },
};

export default meta;

type Story = StoryObj<typeof Button>;

/** This story only shows the default variants defined in default.args. These will be applied to every story if nothing else is specified there. */
export const Primary: Story = {
  args: {
    label: 'Primary',
    variant: 'default',
  },
  play: async ({ canvasElement, args }) => {
    let canvas = within(canvasElement);
    let primaryButton = await canvas.getByRole('button', { name: /Primary/i });
    await expect(primaryButton.innerText).toBe('Primary'.toLocaleUpperCase());
    await expect(primaryButton).toHaveStyle('background-color: #000000');
    await expect(primaryButton).toHaveClass(args.variant || '');
  },
};

/** This story uses custom render function. */
export const AllVariants: Story = {
  render: (args, context) => {
    return (
      <>
        <Button label='Default' />
        <Button label='Primary' variant='action' />
        <Button label='Bad' variant='bad' />
        <Button label='Calm' variant='calm' />
      </>
    );
  },
  parameters: {
    a11y: {
      config: {
        // Setting the selector to '' will disable checks for this particular rule in this story, but violation will still be visible in incomplete tab.
        rules: [
          {
            id: 'color-contrast',
            selector: '',
          },
        ],
      },
    },
  },
};

export const BadVariant: Story = {
  args: { variant: 'bad' },
  parameters: {
    a11y: {
      // Optional selector to inspect
      element: '#storybook-root',
      config: {
        rules: [
          // {
          //   // The autocomplete rule will not run based on the CSS selector provided
          //   id: 'autocomplete-valid',
          //   selector: '*:not([autocomplete="nope"])',
          // },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'color-contrast',
            selector: '',
          },
          // {
          //   // Setting the enabled option to false will disable checks for this particular rule on all stories.
          //   id: 'color-contrast',
          //   enabled: false,
          // },
        ],
      },
      options: {},
      // manual: true,
    },
  },
};

export const ActionVariant: Story = {
  args: { variant: 'action' },
};

export const ActionLabel: Story = {
  args: { label: 'The purpose' },
  // parameters: {
  //   background: {
  //     name: 'red',
  //   },
  // },
};

/** This story combines the two previous stories together */
export const ActionLabelVariant: Story = {
  args: { ...ActionLabel.args, ...ActionVariant.args },
};

export const ActionLabelVariantMobile: Story = {
  args: { ...ActionLabelVariant.args },
  parameters: {
    viewport: {
      defaultViewport: 'mobile1',
    },
  },
};
